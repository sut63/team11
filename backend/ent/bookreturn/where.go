// Code generated by entc, DO NOT EDIT.

package bookreturn

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team11/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RETURNTIME applies equality check predicate on the "RETURN_TIME" field. It's identical to RETURNTIMEEQ.
func RETURNTIME(v time.Time) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRETURNTIME), v))
	})
}

// DAMAGEDPOINT applies equality check predicate on the "DAMAGED_POINT" field. It's identical to DAMAGEDPOINTEQ.
func DAMAGEDPOINT(v int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDAMAGEDPOINT), v))
	})
}

// DAMAGEDPOINTNAME applies equality check predicate on the "DAMAGED_POINTNAME" field. It's identical to DAMAGEDPOINTNAMEEQ.
func DAMAGEDPOINTNAME(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDAMAGEDPOINTNAME), v))
	})
}

// LOST applies equality check predicate on the "LOST" field. It's identical to LOSTEQ.
func LOST(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLOST), v))
	})
}

// RETURNTIMEEQ applies the EQ predicate on the "RETURN_TIME" field.
func RETURNTIMEEQ(v time.Time) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRETURNTIME), v))
	})
}

// RETURNTIMENEQ applies the NEQ predicate on the "RETURN_TIME" field.
func RETURNTIMENEQ(v time.Time) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRETURNTIME), v))
	})
}

// RETURNTIMEIn applies the In predicate on the "RETURN_TIME" field.
func RETURNTIMEIn(vs ...time.Time) predicate.Bookreturn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookreturn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRETURNTIME), v...))
	})
}

// RETURNTIMENotIn applies the NotIn predicate on the "RETURN_TIME" field.
func RETURNTIMENotIn(vs ...time.Time) predicate.Bookreturn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookreturn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRETURNTIME), v...))
	})
}

// RETURNTIMEGT applies the GT predicate on the "RETURN_TIME" field.
func RETURNTIMEGT(v time.Time) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRETURNTIME), v))
	})
}

// RETURNTIMEGTE applies the GTE predicate on the "RETURN_TIME" field.
func RETURNTIMEGTE(v time.Time) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRETURNTIME), v))
	})
}

// RETURNTIMELT applies the LT predicate on the "RETURN_TIME" field.
func RETURNTIMELT(v time.Time) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRETURNTIME), v))
	})
}

// RETURNTIMELTE applies the LTE predicate on the "RETURN_TIME" field.
func RETURNTIMELTE(v time.Time) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRETURNTIME), v))
	})
}

// DAMAGEDPOINTEQ applies the EQ predicate on the "DAMAGED_POINT" field.
func DAMAGEDPOINTEQ(v int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDAMAGEDPOINT), v))
	})
}

// DAMAGEDPOINTNEQ applies the NEQ predicate on the "DAMAGED_POINT" field.
func DAMAGEDPOINTNEQ(v int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDAMAGEDPOINT), v))
	})
}

// DAMAGEDPOINTIn applies the In predicate on the "DAMAGED_POINT" field.
func DAMAGEDPOINTIn(vs ...int) predicate.Bookreturn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookreturn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDAMAGEDPOINT), v...))
	})
}

// DAMAGEDPOINTNotIn applies the NotIn predicate on the "DAMAGED_POINT" field.
func DAMAGEDPOINTNotIn(vs ...int) predicate.Bookreturn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookreturn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDAMAGEDPOINT), v...))
	})
}

// DAMAGEDPOINTGT applies the GT predicate on the "DAMAGED_POINT" field.
func DAMAGEDPOINTGT(v int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDAMAGEDPOINT), v))
	})
}

// DAMAGEDPOINTGTE applies the GTE predicate on the "DAMAGED_POINT" field.
func DAMAGEDPOINTGTE(v int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDAMAGEDPOINT), v))
	})
}

// DAMAGEDPOINTLT applies the LT predicate on the "DAMAGED_POINT" field.
func DAMAGEDPOINTLT(v int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDAMAGEDPOINT), v))
	})
}

// DAMAGEDPOINTLTE applies the LTE predicate on the "DAMAGED_POINT" field.
func DAMAGEDPOINTLTE(v int) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDAMAGEDPOINT), v))
	})
}

// DAMAGEDPOINTNAMEEQ applies the EQ predicate on the "DAMAGED_POINTNAME" field.
func DAMAGEDPOINTNAMEEQ(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDAMAGEDPOINTNAME), v))
	})
}

// DAMAGEDPOINTNAMENEQ applies the NEQ predicate on the "DAMAGED_POINTNAME" field.
func DAMAGEDPOINTNAMENEQ(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDAMAGEDPOINTNAME), v))
	})
}

// DAMAGEDPOINTNAMEIn applies the In predicate on the "DAMAGED_POINTNAME" field.
func DAMAGEDPOINTNAMEIn(vs ...string) predicate.Bookreturn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookreturn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDAMAGEDPOINTNAME), v...))
	})
}

// DAMAGEDPOINTNAMENotIn applies the NotIn predicate on the "DAMAGED_POINTNAME" field.
func DAMAGEDPOINTNAMENotIn(vs ...string) predicate.Bookreturn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookreturn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDAMAGEDPOINTNAME), v...))
	})
}

// DAMAGEDPOINTNAMEGT applies the GT predicate on the "DAMAGED_POINTNAME" field.
func DAMAGEDPOINTNAMEGT(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDAMAGEDPOINTNAME), v))
	})
}

// DAMAGEDPOINTNAMEGTE applies the GTE predicate on the "DAMAGED_POINTNAME" field.
func DAMAGEDPOINTNAMEGTE(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDAMAGEDPOINTNAME), v))
	})
}

// DAMAGEDPOINTNAMELT applies the LT predicate on the "DAMAGED_POINTNAME" field.
func DAMAGEDPOINTNAMELT(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDAMAGEDPOINTNAME), v))
	})
}

// DAMAGEDPOINTNAMELTE applies the LTE predicate on the "DAMAGED_POINTNAME" field.
func DAMAGEDPOINTNAMELTE(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDAMAGEDPOINTNAME), v))
	})
}

// DAMAGEDPOINTNAMEContains applies the Contains predicate on the "DAMAGED_POINTNAME" field.
func DAMAGEDPOINTNAMEContains(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDAMAGEDPOINTNAME), v))
	})
}

// DAMAGEDPOINTNAMEHasPrefix applies the HasPrefix predicate on the "DAMAGED_POINTNAME" field.
func DAMAGEDPOINTNAMEHasPrefix(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDAMAGEDPOINTNAME), v))
	})
}

// DAMAGEDPOINTNAMEHasSuffix applies the HasSuffix predicate on the "DAMAGED_POINTNAME" field.
func DAMAGEDPOINTNAMEHasSuffix(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDAMAGEDPOINTNAME), v))
	})
}

// DAMAGEDPOINTNAMEEqualFold applies the EqualFold predicate on the "DAMAGED_POINTNAME" field.
func DAMAGEDPOINTNAMEEqualFold(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDAMAGEDPOINTNAME), v))
	})
}

// DAMAGEDPOINTNAMEContainsFold applies the ContainsFold predicate on the "DAMAGED_POINTNAME" field.
func DAMAGEDPOINTNAMEContainsFold(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDAMAGEDPOINTNAME), v))
	})
}

// LOSTEQ applies the EQ predicate on the "LOST" field.
func LOSTEQ(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLOST), v))
	})
}

// LOSTNEQ applies the NEQ predicate on the "LOST" field.
func LOSTNEQ(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLOST), v))
	})
}

// LOSTIn applies the In predicate on the "LOST" field.
func LOSTIn(vs ...string) predicate.Bookreturn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookreturn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLOST), v...))
	})
}

// LOSTNotIn applies the NotIn predicate on the "LOST" field.
func LOSTNotIn(vs ...string) predicate.Bookreturn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookreturn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLOST), v...))
	})
}

// LOSTGT applies the GT predicate on the "LOST" field.
func LOSTGT(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLOST), v))
	})
}

// LOSTGTE applies the GTE predicate on the "LOST" field.
func LOSTGTE(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLOST), v))
	})
}

// LOSTLT applies the LT predicate on the "LOST" field.
func LOSTLT(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLOST), v))
	})
}

// LOSTLTE applies the LTE predicate on the "LOST" field.
func LOSTLTE(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLOST), v))
	})
}

// LOSTContains applies the Contains predicate on the "LOST" field.
func LOSTContains(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLOST), v))
	})
}

// LOSTHasPrefix applies the HasPrefix predicate on the "LOST" field.
func LOSTHasPrefix(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLOST), v))
	})
}

// LOSTHasSuffix applies the HasSuffix predicate on the "LOST" field.
func LOSTHasSuffix(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLOST), v))
	})
}

// LOSTEqualFold applies the EqualFold predicate on the "LOST" field.
func LOSTEqualFold(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLOST), v))
	})
}

// LOSTContainsFold applies the ContainsFold predicate on the "LOST" field.
func LOSTContainsFold(v string) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLOST), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLocation applies the HasEdge predicate on the "location" edge.
func HasLocation() predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LocationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LocationTable, LocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationWith applies the HasEdge predicate on the "location" edge with a given conditions (other predicates).
func HasLocationWith(preds ...predicate.Location) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LocationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LocationTable, LocationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMustreturn applies the HasEdge predicate on the "mustreturn" edge.
func HasMustreturn() predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MustreturnTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MustreturnTable, MustreturnColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMustreturnWith applies the HasEdge predicate on the "mustreturn" edge with a given conditions (other predicates).
func HasMustreturnWith(preds ...predicate.Bookborrow) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MustreturnInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MustreturnTable, MustreturnColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Bookreturn) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Bookreturn) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bookreturn) predicate.Bookreturn {
	return predicate.Bookreturn(func(s *sql.Selector) {
		p(s.Not())
	})
}
