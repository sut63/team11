// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team11/app/ent/bookborrow"
	"github.com/team11/app/ent/bookreturn"
	"github.com/team11/app/ent/location"
	"github.com/team11/app/ent/predicate"
	"github.com/team11/app/ent/user"
)

// BookreturnUpdate is the builder for updating Bookreturn entities.
type BookreturnUpdate struct {
	config
	hooks      []Hook
	mutation   *BookreturnMutation
	predicates []predicate.Bookreturn
}

// Where adds a new predicate for the builder.
func (bu *BookreturnUpdate) Where(ps ...predicate.Bookreturn) *BookreturnUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetRETURNTIME sets the RETURN_TIME field.
func (bu *BookreturnUpdate) SetRETURNTIME(t time.Time) *BookreturnUpdate {
	bu.mutation.SetRETURNTIME(t)
	return bu
}

// SetDAMAGEDPOINT sets the DAMAGED_POINT field.
func (bu *BookreturnUpdate) SetDAMAGEDPOINT(i int) *BookreturnUpdate {
	bu.mutation.ResetDAMAGEDPOINT()
	bu.mutation.SetDAMAGEDPOINT(i)
	return bu
}

// AddDAMAGEDPOINT adds i to DAMAGED_POINT.
func (bu *BookreturnUpdate) AddDAMAGEDPOINT(i int) *BookreturnUpdate {
	bu.mutation.AddDAMAGEDPOINT(i)
	return bu
}

// SetDAMAGEDPOINTNAME sets the DAMAGED_POINTNAME field.
func (bu *BookreturnUpdate) SetDAMAGEDPOINTNAME(s string) *BookreturnUpdate {
	bu.mutation.SetDAMAGEDPOINTNAME(s)
	return bu
}

// SetLOST sets the LOST field.
func (bu *BookreturnUpdate) SetLOST(s string) *BookreturnUpdate {
	bu.mutation.SetLOST(s)
	return bu
}

// SetUserID sets the user edge to User by id.
func (bu *BookreturnUpdate) SetUserID(id int) *BookreturnUpdate {
	bu.mutation.SetUserID(id)
	return bu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (bu *BookreturnUpdate) SetNillableUserID(id *int) *BookreturnUpdate {
	if id != nil {
		bu = bu.SetUserID(*id)
	}
	return bu
}

// SetUser sets the user edge to User.
func (bu *BookreturnUpdate) SetUser(u *User) *BookreturnUpdate {
	return bu.SetUserID(u.ID)
}

// SetLocationID sets the location edge to Location by id.
func (bu *BookreturnUpdate) SetLocationID(id int) *BookreturnUpdate {
	bu.mutation.SetLocationID(id)
	return bu
}

// SetNillableLocationID sets the location edge to Location by id if the given value is not nil.
func (bu *BookreturnUpdate) SetNillableLocationID(id *int) *BookreturnUpdate {
	if id != nil {
		bu = bu.SetLocationID(*id)
	}
	return bu
}

// SetLocation sets the location edge to Location.
func (bu *BookreturnUpdate) SetLocation(l *Location) *BookreturnUpdate {
	return bu.SetLocationID(l.ID)
}

// SetMustreturnID sets the mustreturn edge to Bookborrow by id.
func (bu *BookreturnUpdate) SetMustreturnID(id int) *BookreturnUpdate {
	bu.mutation.SetMustreturnID(id)
	return bu
}

// SetNillableMustreturnID sets the mustreturn edge to Bookborrow by id if the given value is not nil.
func (bu *BookreturnUpdate) SetNillableMustreturnID(id *int) *BookreturnUpdate {
	if id != nil {
		bu = bu.SetMustreturnID(*id)
	}
	return bu
}

// SetMustreturn sets the mustreturn edge to Bookborrow.
func (bu *BookreturnUpdate) SetMustreturn(b *Bookborrow) *BookreturnUpdate {
	return bu.SetMustreturnID(b.ID)
}

// Mutation returns the BookreturnMutation object of the builder.
func (bu *BookreturnUpdate) Mutation() *BookreturnMutation {
	return bu.mutation
}

// ClearUser clears the user edge to User.
func (bu *BookreturnUpdate) ClearUser() *BookreturnUpdate {
	bu.mutation.ClearUser()
	return bu
}

// ClearLocation clears the location edge to Location.
func (bu *BookreturnUpdate) ClearLocation() *BookreturnUpdate {
	bu.mutation.ClearLocation()
	return bu
}

// ClearMustreturn clears the mustreturn edge to Bookborrow.
func (bu *BookreturnUpdate) ClearMustreturn() *BookreturnUpdate {
	bu.mutation.ClearMustreturn()
	return bu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BookreturnUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := bu.mutation.DAMAGEDPOINT(); ok {
		if err := bookreturn.DAMAGEDPOINTValidator(v); err != nil {
			return 0, &ValidationError{Name: "DAMAGED_POINT", err: fmt.Errorf("ent: validator failed for field \"DAMAGED_POINT\": %w", err)}
		}
	}
	if v, ok := bu.mutation.DAMAGEDPOINTNAME(); ok {
		if err := bookreturn.DAMAGEDPOINTNAMEValidator(v); err != nil {
			return 0, &ValidationError{Name: "DAMAGED_POINTNAME", err: fmt.Errorf("ent: validator failed for field \"DAMAGED_POINTNAME\": %w", err)}
		}
	}
	if v, ok := bu.mutation.LOST(); ok {
		if err := bookreturn.LOSTValidator(v); err != nil {
			return 0, &ValidationError{Name: "LOST", err: fmt.Errorf("ent: validator failed for field \"LOST\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookreturnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookreturnUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookreturnUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookreturnUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BookreturnUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookreturn.Table,
			Columns: bookreturn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bookreturn.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.RETURNTIME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookreturn.FieldRETURNTIME,
		})
	}
	if value, ok := bu.mutation.DAMAGEDPOINT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bookreturn.FieldDAMAGEDPOINT,
		})
	}
	if value, ok := bu.mutation.AddedDAMAGEDPOINT(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bookreturn.FieldDAMAGEDPOINT,
		})
	}
	if value, ok := bu.mutation.DAMAGEDPOINTNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookreturn.FieldDAMAGEDPOINTNAME,
		})
	}
	if value, ok := bu.mutation.LOST(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookreturn.FieldLOST,
		})
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookreturn.UserTable,
			Columns: []string{bookreturn.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookreturn.UserTable,
			Columns: []string{bookreturn.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookreturn.LocationTable,
			Columns: []string{bookreturn.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookreturn.LocationTable,
			Columns: []string{bookreturn.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.MustreturnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookreturn.MustreturnTable,
			Columns: []string{bookreturn.MustreturnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookborrow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.MustreturnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookreturn.MustreturnTable,
			Columns: []string{bookreturn.MustreturnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookborrow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookreturn.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BookreturnUpdateOne is the builder for updating a single Bookreturn entity.
type BookreturnUpdateOne struct {
	config
	hooks    []Hook
	mutation *BookreturnMutation
}

// SetRETURNTIME sets the RETURN_TIME field.
func (buo *BookreturnUpdateOne) SetRETURNTIME(t time.Time) *BookreturnUpdateOne {
	buo.mutation.SetRETURNTIME(t)
	return buo
}

// SetDAMAGEDPOINT sets the DAMAGED_POINT field.
func (buo *BookreturnUpdateOne) SetDAMAGEDPOINT(i int) *BookreturnUpdateOne {
	buo.mutation.ResetDAMAGEDPOINT()
	buo.mutation.SetDAMAGEDPOINT(i)
	return buo
}

// AddDAMAGEDPOINT adds i to DAMAGED_POINT.
func (buo *BookreturnUpdateOne) AddDAMAGEDPOINT(i int) *BookreturnUpdateOne {
	buo.mutation.AddDAMAGEDPOINT(i)
	return buo
}

// SetDAMAGEDPOINTNAME sets the DAMAGED_POINTNAME field.
func (buo *BookreturnUpdateOne) SetDAMAGEDPOINTNAME(s string) *BookreturnUpdateOne {
	buo.mutation.SetDAMAGEDPOINTNAME(s)
	return buo
}

// SetLOST sets the LOST field.
func (buo *BookreturnUpdateOne) SetLOST(s string) *BookreturnUpdateOne {
	buo.mutation.SetLOST(s)
	return buo
}

// SetUserID sets the user edge to User by id.
func (buo *BookreturnUpdateOne) SetUserID(id int) *BookreturnUpdateOne {
	buo.mutation.SetUserID(id)
	return buo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (buo *BookreturnUpdateOne) SetNillableUserID(id *int) *BookreturnUpdateOne {
	if id != nil {
		buo = buo.SetUserID(*id)
	}
	return buo
}

// SetUser sets the user edge to User.
func (buo *BookreturnUpdateOne) SetUser(u *User) *BookreturnUpdateOne {
	return buo.SetUserID(u.ID)
}

// SetLocationID sets the location edge to Location by id.
func (buo *BookreturnUpdateOne) SetLocationID(id int) *BookreturnUpdateOne {
	buo.mutation.SetLocationID(id)
	return buo
}

// SetNillableLocationID sets the location edge to Location by id if the given value is not nil.
func (buo *BookreturnUpdateOne) SetNillableLocationID(id *int) *BookreturnUpdateOne {
	if id != nil {
		buo = buo.SetLocationID(*id)
	}
	return buo
}

// SetLocation sets the location edge to Location.
func (buo *BookreturnUpdateOne) SetLocation(l *Location) *BookreturnUpdateOne {
	return buo.SetLocationID(l.ID)
}

// SetMustreturnID sets the mustreturn edge to Bookborrow by id.
func (buo *BookreturnUpdateOne) SetMustreturnID(id int) *BookreturnUpdateOne {
	buo.mutation.SetMustreturnID(id)
	return buo
}

// SetNillableMustreturnID sets the mustreturn edge to Bookborrow by id if the given value is not nil.
func (buo *BookreturnUpdateOne) SetNillableMustreturnID(id *int) *BookreturnUpdateOne {
	if id != nil {
		buo = buo.SetMustreturnID(*id)
	}
	return buo
}

// SetMustreturn sets the mustreturn edge to Bookborrow.
func (buo *BookreturnUpdateOne) SetMustreturn(b *Bookborrow) *BookreturnUpdateOne {
	return buo.SetMustreturnID(b.ID)
}

// Mutation returns the BookreturnMutation object of the builder.
func (buo *BookreturnUpdateOne) Mutation() *BookreturnMutation {
	return buo.mutation
}

// ClearUser clears the user edge to User.
func (buo *BookreturnUpdateOne) ClearUser() *BookreturnUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// ClearLocation clears the location edge to Location.
func (buo *BookreturnUpdateOne) ClearLocation() *BookreturnUpdateOne {
	buo.mutation.ClearLocation()
	return buo
}

// ClearMustreturn clears the mustreturn edge to Bookborrow.
func (buo *BookreturnUpdateOne) ClearMustreturn() *BookreturnUpdateOne {
	buo.mutation.ClearMustreturn()
	return buo
}

// Save executes the query and returns the updated entity.
func (buo *BookreturnUpdateOne) Save(ctx context.Context) (*Bookreturn, error) {
	if v, ok := buo.mutation.DAMAGEDPOINT(); ok {
		if err := bookreturn.DAMAGEDPOINTValidator(v); err != nil {
			return nil, &ValidationError{Name: "DAMAGED_POINT", err: fmt.Errorf("ent: validator failed for field \"DAMAGED_POINT\": %w", err)}
		}
	}
	if v, ok := buo.mutation.DAMAGEDPOINTNAME(); ok {
		if err := bookreturn.DAMAGEDPOINTNAMEValidator(v); err != nil {
			return nil, &ValidationError{Name: "DAMAGED_POINTNAME", err: fmt.Errorf("ent: validator failed for field \"DAMAGED_POINTNAME\": %w", err)}
		}
	}
	if v, ok := buo.mutation.LOST(); ok {
		if err := bookreturn.LOSTValidator(v); err != nil {
			return nil, &ValidationError{Name: "LOST", err: fmt.Errorf("ent: validator failed for field \"LOST\": %w", err)}
		}
	}

	var (
		err  error
		node *Bookreturn
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookreturnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookreturnUpdateOne) SaveX(ctx context.Context) *Bookreturn {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BookreturnUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookreturnUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BookreturnUpdateOne) sqlSave(ctx context.Context) (b *Bookreturn, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookreturn.Table,
			Columns: bookreturn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bookreturn.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bookreturn.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.RETURNTIME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookreturn.FieldRETURNTIME,
		})
	}
	if value, ok := buo.mutation.DAMAGEDPOINT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bookreturn.FieldDAMAGEDPOINT,
		})
	}
	if value, ok := buo.mutation.AddedDAMAGEDPOINT(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bookreturn.FieldDAMAGEDPOINT,
		})
	}
	if value, ok := buo.mutation.DAMAGEDPOINTNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookreturn.FieldDAMAGEDPOINTNAME,
		})
	}
	if value, ok := buo.mutation.LOST(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookreturn.FieldLOST,
		})
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookreturn.UserTable,
			Columns: []string{bookreturn.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookreturn.UserTable,
			Columns: []string{bookreturn.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookreturn.LocationTable,
			Columns: []string{bookreturn.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookreturn.LocationTable,
			Columns: []string{bookreturn.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.MustreturnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookreturn.MustreturnTable,
			Columns: []string{bookreturn.MustreturnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookborrow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.MustreturnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookreturn.MustreturnTable,
			Columns: []string{bookreturn.MustreturnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookborrow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	b = &Bookreturn{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookreturn.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
