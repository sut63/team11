/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntAuthor,
    EntAuthorFromJSON,
    EntAuthorFromJSONTyped,
    EntAuthorToJSON,
    EntBookborrow,
    EntBookborrowFromJSON,
    EntBookborrowFromJSONTyped,
    EntBookborrowToJSON,
    EntCategory,
    EntCategoryFromJSON,
    EntCategoryFromJSONTyped,
    EntCategoryToJSON,
    EntStatus,
    EntStatusFromJSON,
    EntStatusFromJSONTyped,
    EntStatusToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserFromJSONTyped,
    EntUserToJSON,
} from './';

/**
 * 
 * @export
 * @interface EntBookEdges
 */
export interface EntBookEdges {
    /**
     * 
     * @type {EntAuthor}
     * @memberof EntBookEdges
     */
    author?: EntAuthor;
    /**
     * Booklist holds the value of the booklist edge.
     * @type {Array<EntBookborrow>}
     * @memberof EntBookEdges
     */
    booklist?: Array<EntBookborrow>;
    /**
     * 
     * @type {EntCategory}
     * @memberof EntBookEdges
     */
    category?: EntCategory;
    /**
     * 
     * @type {EntStatus}
     * @memberof EntBookEdges
     */
    status?: EntStatus;
    /**
     * 
     * @type {EntUser}
     * @memberof EntBookEdges
     */
    user?: EntUser;
}

export function EntBookEdgesFromJSON(json: any): EntBookEdges {
    return EntBookEdgesFromJSONTyped(json, false);
}

export function EntBookEdgesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntBookEdges {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'author': !exists(json, 'author') ? undefined : EntAuthorFromJSON(json['author']),
        'booklist': !exists(json, 'booklist') ? undefined : ((json['booklist'] as Array<any>).map(EntBookborrowFromJSON)),
        'category': !exists(json, 'category') ? undefined : EntCategoryFromJSON(json['category']),
        'status': !exists(json, 'status') ? undefined : EntStatusFromJSON(json['status']),
        'user': !exists(json, 'user') ? undefined : EntUserFromJSON(json['user']),
    };
}

export function EntBookEdgesToJSON(value?: EntBookEdges | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'author': EntAuthorToJSON(value.author),
        'booklist': value.booklist === undefined ? undefined : ((value.booklist as Array<any>).map(EntBookborrowToJSON)),
        'category': EntCategoryToJSON(value.category),
        'status': EntStatusToJSON(value.status),
        'user': EntUserToJSON(value.user),
    };
}


