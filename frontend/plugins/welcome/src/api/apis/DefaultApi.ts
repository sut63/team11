/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersBook,
    ControllersBookFromJSON,
    ControllersBookToJSON,
    ControllersBookborrow,
    ControllersBookborrowFromJSON,
    ControllersBookborrowToJSON,
    ControllersBooking,
    ControllersBookingFromJSON,
    ControllersBookingToJSON,
    ControllersBookreturn,
    ControllersBookreturnFromJSON,
    ControllersBookreturnToJSON,
    ControllersClientEntity,
    ControllersClientEntityFromJSON,
    ControllersClientEntityToJSON,
    ControllersPreemption,
    ControllersPreemptionFromJSON,
    ControllersPreemptionToJSON,
    ControllersResearch,
    ControllersResearchFromJSON,
    ControllersResearchToJSON,
    EntAuthor,
    EntAuthorFromJSON,
    EntAuthorToJSON,
    EntBook,
    EntBookFromJSON,
    EntBookToJSON,
    EntBookborrow,
    EntBookborrowFromJSON,
    EntBookborrowToJSON,
    EntBooking,
    EntBookingFromJSON,
    EntBookingToJSON,
    EntBookreturn,
    EntBookreturnFromJSON,
    EntBookreturnToJSON,
    EntCategory,
    EntCategoryFromJSON,
    EntCategoryToJSON,
    EntClientEntity,
    EntClientEntityFromJSON,
    EntClientEntityToJSON,
    EntLocation,
    EntLocationFromJSON,
    EntLocationToJSON,
    EntPreemption,
    EntPreemptionFromJSON,
    EntPreemptionToJSON,
    EntPurpose,
    EntPurposeFromJSON,
    EntPurposeToJSON,
    EntResearch,
    EntResearchFromJSON,
    EntResearchToJSON,
    EntResearchtype,
    EntResearchtypeFromJSON,
    EntResearchtypeToJSON,
    EntRole,
    EntRoleFromJSON,
    EntRoleToJSON,
    EntRoominfo,
    EntRoominfoFromJSON,
    EntRoominfoToJSON,
    EntServicePoint,
    EntServicePointFromJSON,
    EntServicePointToJSON,
    EntStatus,
    EntStatusFromJSON,
    EntStatusToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateAuthorRequest {
    author: EntAuthor;
}

export interface CreateBookRequest {
    book: ControllersBook;
}

export interface CreateBookborrowRequest {
    bookborrow: ControllersBookborrow;
}

export interface CreateBookingRequest {
    booking: ControllersBooking;
}

export interface CreateBookreturnRequest {
    bookreturn: ControllersBookreturn;
}

export interface CreateCategoryRequest {
    category: EntCategory;
}

export interface CreateCliententityRequest {
    cliententity: EntClientEntity;
}

export interface CreateLocationRequest {
    location: EntLocation;
}

export interface CreatePreemptionRequest {
    preemption: ControllersPreemption;
}

export interface CreateResearchRequest {
    research: ControllersResearch;
}

export interface CreateResearchtypeRequest {
    researchtype: EntResearchtype;
}

export interface CreateRoleRequest {
    role: EntRole;
}

export interface CreateServicepointRequest {
    entServicepoint: EntServicePoint;
}

export interface CreateStatusRequest {
    status: EntStatus;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteAuthorRequest {
    id: number;
}

export interface DeleteBookRequest {
    id: number;
}

export interface DeleteBookborrowRequest {
    id: number;
}

export interface DeleteBookingRequest {
    id: number;
}

export interface DeleteBookreturnRequest {
    id: number;
}

export interface DeleteCategoryRequest {
    id: number;
}

export interface DeleteCliententityRequest {
    id: number;
}

export interface DeleteLocationRequest {
    id: number;
}

export interface DeleteResearchRequest {
    id: number;
}

export interface DeleteResearchtypeRequest {
    id: number;
}

export interface DeleteRoleRequest {
    id: number;
}

export interface DeleteRoominfoRequest {
    id: number;
}

export interface DeleteServicepointRequest {
    id: number;
}

export interface DeleteStatusRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetAuthorRequest {
    id: number;
}

export interface GetBookRequest {
    id: number;
}

export interface GetBookBySearchRequest {
    book?: string;
}

export interface GetBookborrowRequest {
    id: string;
}

export interface GetBookborrowuserRequest {
    id: number;
}

export interface GetBookingRequest {
    id: number;
}

export interface GetBookreturnRequest {
    id: string;
}

export interface GetCategoryRequest {
    id: number;
}

export interface GetCliententityRequest {
    id: number;
}

export interface GetLocationRequest {
    id: number;
}

export interface GetPreemptionRequest {
    id: number;
}

export interface GetPurposeRequest {
    id: number;
}

export interface GetRearchRequest {
    id: number;
}

export interface GetResearchBySearchRequest {
    research?: string;
}

export interface GetResearchtypeRequest {
    id: number;
}

export interface GetRoleRequest {
    id: number;
}

export interface GetRoominfoRequest {
    id: number;
}

export interface GetServicepointRequest {
    id: number;
}

export interface GetStatusRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListAuthorRequest {
    limit?: number;
    offset?: number;
}

export interface ListBookRequest {
    limit?: number;
    offset?: number;
}

export interface ListBookborrowRequest {
    limit?: number;
    offset?: number;
}

export interface ListBookfreesRequest {
    limit?: number;
    offset?: number;
}

export interface ListBookreturnRequest {
    name?: string;
}

export interface ListCategoryRequest {
    limit?: number;
    offset?: number;
}

export interface ListLocationRequest {
    limit?: number;
    offset?: number;
}

export interface ListPreemptionRequest {
    nameu?: string;
}

export interface ListPurposeRequest {
    limit?: number;
    offset?: number;
}

export interface ListResearchRequest {
    limit?: number;
    offset?: number;
}

export interface ListResearchtypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoleRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoominfoRequest {
    limit?: number;
    offset?: number;
}

export interface ListServicepointRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatusRequest {
    limit?: number;
    offset?: number;
}

export interface SearchBookingRequest {
    userid?: number;
    username?: string;
    clientname?: string;
    phonenumber?: string;
    operator?: string;
}

export interface UpdateAuthorRequest {
    id: number;
    author: EntAuthor;
}

export interface UpdateBookRequest {
    id: number;
    book: EntBook;
}

export interface UpdateBookborrowRequest {
    id: number;
    bookborrow: EntBookborrow;
}

export interface UpdateBookingRequest {
    id: number;
    booking: EntBooking;
}

export interface UpdateCategoryRequest {
    id: number;
    category: EntCategory;
}

export interface UpdateCliententityRequest {
    id: number;
    cliententity: ControllersClientEntity;
}

export interface UpdateLocationRequest {
    id: number;
    location: EntLocation;
}

export interface UpdateResearchRequest {
    id: number;
    research: EntResearch;
}

export interface UpdateResearchtypeRequest {
    id: number;
    researchtype: EntResearchtype;
}

export interface UpdateRoleRequest {
    id: number;
    role: EntRole;
}

export interface UpdateRoominfoRequest {
    id: number;
    user: EntRoominfo;
}

export interface UpdateServicepointRequest {
    id: number;
    servicepoint: EntServicePoint;
}

export interface UpdateStatusRequest {
    id: number;
    status: EntStatus;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create author
     * Create author
     */
    async createAuthorRaw(requestParameters: CreateAuthorRequest): Promise<runtime.ApiResponse<EntAuthor>> {
        if (requestParameters.author === null || requestParameters.author === undefined) {
            throw new runtime.RequiredError('author','Required parameter requestParameters.author was null or undefined when calling createAuthor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Authors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntAuthorToJSON(requestParameters.author),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAuthorFromJSON(jsonValue));
    }

    /**
     * Create author
     * Create author
     */
    async createAuthor(requestParameters: CreateAuthorRequest): Promise<EntAuthor> {
        const response = await this.createAuthorRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create book
     * Create book
     */
    async createBookRaw(requestParameters: CreateBookRequest): Promise<runtime.ApiResponse<EntBook>> {
        if (requestParameters.book === null || requestParameters.book === undefined) {
            throw new runtime.RequiredError('book','Required parameter requestParameters.book was null or undefined when calling createBook.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/books`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersBookToJSON(requestParameters.book),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookFromJSON(jsonValue));
    }

    /**
     * Create book
     * Create book
     */
    async createBook(requestParameters: CreateBookRequest): Promise<EntBook> {
        const response = await this.createBookRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create bookborrow
     * Create bookborrow
     */
    async createBookborrowRaw(requestParameters: CreateBookborrowRequest): Promise<runtime.ApiResponse<EntBookborrow>> {
        if (requestParameters.bookborrow === null || requestParameters.bookborrow === undefined) {
            throw new runtime.RequiredError('bookborrow','Required parameter requestParameters.bookborrow was null or undefined when calling createBookborrow.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bookborrows`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersBookborrowToJSON(requestParameters.bookborrow),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookborrowFromJSON(jsonValue));
    }

    /**
     * Create bookborrow
     * Create bookborrow
     */
    async createBookborrow(requestParameters: CreateBookborrowRequest): Promise<EntBookborrow> {
        const response = await this.createBookborrowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create booking
     * Create booking
     */
    async createBookingRaw(requestParameters: CreateBookingRequest): Promise<runtime.ApiResponse<EntBooking>> {
        if (requestParameters.booking === null || requestParameters.booking === undefined) {
            throw new runtime.RequiredError('booking','Required parameter requestParameters.booking was null or undefined when calling createBooking.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bookings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersBookingToJSON(requestParameters.booking),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookingFromJSON(jsonValue));
    }

    /**
     * Create booking
     * Create booking
     */
    async createBooking(requestParameters: CreateBookingRequest): Promise<EntBooking> {
        const response = await this.createBookingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create bookreturn
     * Create bookreturn
     */
    async createBookreturnRaw(requestParameters: CreateBookreturnRequest): Promise<runtime.ApiResponse<EntBookreturn>> {
        if (requestParameters.bookreturn === null || requestParameters.bookreturn === undefined) {
            throw new runtime.RequiredError('bookreturn','Required parameter requestParameters.bookreturn was null or undefined when calling createBookreturn.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bookreturns`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersBookreturnToJSON(requestParameters.bookreturn),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookreturnFromJSON(jsonValue));
    }

    /**
     * Create bookreturn
     * Create bookreturn
     */
    async createBookreturn(requestParameters: CreateBookreturnRequest): Promise<EntBookreturn> {
        const response = await this.createBookreturnRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create category
     * Create category
     */
    async createCategoryRaw(requestParameters: CreateCategoryRequest): Promise<runtime.ApiResponse<EntCategory>> {
        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling createCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/categorys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCategoryToJSON(requestParameters.category),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCategoryFromJSON(jsonValue));
    }

    /**
     * Create category
     * Create category
     */
    async createCategory(requestParameters: CreateCategoryRequest): Promise<EntCategory> {
        const response = await this.createCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create cliententity
     * Create cliententity
     */
    async createCliententityRaw(requestParameters: CreateCliententityRequest): Promise<runtime.ApiResponse<EntClientEntity>> {
        if (requestParameters.cliententity === null || requestParameters.cliententity === undefined) {
            throw new runtime.RequiredError('cliententity','Required parameter requestParameters.cliententity was null or undefined when calling createCliententity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cliententitys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntClientEntityToJSON(requestParameters.cliententity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClientEntityFromJSON(jsonValue));
    }

    /**
     * Create cliententity
     * Create cliententity
     */
    async createCliententity(requestParameters: CreateCliententityRequest): Promise<EntClientEntity> {
        const response = await this.createCliententityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create location
     * Create location
     */
    async createLocationRaw(requestParameters: CreateLocationRequest): Promise<runtime.ApiResponse<EntLocation>> {
        if (requestParameters.location === null || requestParameters.location === undefined) {
            throw new runtime.RequiredError('location','Required parameter requestParameters.location was null or undefined when calling createLocation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntLocationToJSON(requestParameters.location),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLocationFromJSON(jsonValue));
    }

    /**
     * Create location
     * Create location
     */
    async createLocation(requestParameters: CreateLocationRequest): Promise<EntLocation> {
        const response = await this.createLocationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create preemption
     * Create preemption
     */
    async createPreemptionRaw(requestParameters: CreatePreemptionRequest): Promise<runtime.ApiResponse<EntPreemption>> {
        if (requestParameters.preemption === null || requestParameters.preemption === undefined) {
            throw new runtime.RequiredError('preemption','Required parameter requestParameters.preemption was null or undefined when calling createPreemption.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/preemptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPreemptionToJSON(requestParameters.preemption),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPreemptionFromJSON(jsonValue));
    }

    /**
     * Create preemption
     * Create preemption
     */
    async createPreemption(requestParameters: CreatePreemptionRequest): Promise<EntPreemption> {
        const response = await this.createPreemptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create research
     * Create research
     */
    async createResearchRaw(requestParameters: CreateResearchRequest): Promise<runtime.ApiResponse<EntResearch>> {
        if (requestParameters.research === null || requestParameters.research === undefined) {
            throw new runtime.RequiredError('research','Required parameter requestParameters.research was null or undefined when calling createResearch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/researches`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersResearchToJSON(requestParameters.research),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntResearchFromJSON(jsonValue));
    }

    /**
     * Create research
     * Create research
     */
    async createResearch(requestParameters: CreateResearchRequest): Promise<EntResearch> {
        const response = await this.createResearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create researchtype
     * Create researchtype
     */
    async createResearchtypeRaw(requestParameters: CreateResearchtypeRequest): Promise<runtime.ApiResponse<EntResearchtype>> {
        if (requestParameters.researchtype === null || requestParameters.researchtype === undefined) {
            throw new runtime.RequiredError('researchtype','Required parameter requestParameters.researchtype was null or undefined when calling createResearchtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ResearchTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntResearchtypeToJSON(requestParameters.researchtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntResearchtypeFromJSON(jsonValue));
    }

    /**
     * Create researchtype
     * Create researchtype
     */
    async createResearchtype(requestParameters: CreateResearchtypeRequest): Promise<EntResearchtype> {
        const response = await this.createResearchtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create role
     * Create role
     */
    async createRoleRaw(requestParameters: CreateRoleRequest): Promise<runtime.ApiResponse<EntRole>> {
        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling createRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoleToJSON(requestParameters.role),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoleFromJSON(jsonValue));
    }

    /**
     * Create role
     * Create role
     */
    async createRole(requestParameters: CreateRoleRequest): Promise<EntRole> {
        const response = await this.createRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create servicepoint
     * Create servicepoint
     */
    async createServicepointRaw(requestParameters: CreateServicepointRequest): Promise<runtime.ApiResponse<EntServicePoint>> {
        if (requestParameters.entServicepoint === null || requestParameters.entServicepoint === undefined) {
            throw new runtime.RequiredError('entServicepoint','Required parameter requestParameters.entServicepoint was null or undefined when calling createServicepoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/servicepoints`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntServicePointToJSON(requestParameters.entServicepoint),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntServicePointFromJSON(jsonValue));
    }

    /**
     * Create servicepoint
     * Create servicepoint
     */
    async createServicepoint(requestParameters: CreateServicepointRequest): Promise<EntServicePoint> {
        const response = await this.createServicepointRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create status
     * Create status
     */
    async createStatusRaw(requestParameters: CreateStatusRequest): Promise<runtime.ApiResponse<EntStatus>> {
        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling createStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statuss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatusToJSON(requestParameters.status),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusFromJSON(jsonValue));
    }

    /**
     * Create status
     * Create status
     */
    async createStatus(requestParameters: CreateStatusRequest): Promise<EntStatus> {
        const response = await this.createStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get author by ID
     * Delete a author entity by ID
     */
    async deleteAuthorRaw(requestParameters: DeleteAuthorRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAuthor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Authors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get author by ID
     * Delete a author entity by ID
     */
    async deleteAuthor(requestParameters: DeleteAuthorRequest): Promise<object> {
        const response = await this.deleteAuthorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get book by ID
     * Delete a book entity by ID
     */
    async deleteBookRaw(requestParameters: DeleteBookRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBook.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get book by ID
     * Delete a book entity by ID
     */
    async deleteBook(requestParameters: DeleteBookRequest): Promise<object> {
        const response = await this.deleteBookRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bookborrow by ID
     * Delete a bookborrow entity by ID
     */
    async deleteBookborrowRaw(requestParameters: DeleteBookborrowRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBookborrow.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookborrows/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get bookborrow by ID
     * Delete a bookborrow entity by ID
     */
    async deleteBookborrow(requestParameters: DeleteBookborrowRequest): Promise<object> {
        const response = await this.deleteBookborrowRaw(requestParameters);
        return await response.value();
    }

    /**
     * get booking by ID
     * Delete a booking entity by ID
     */
    async deleteBookingRaw(requestParameters: DeleteBookingRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBooking.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get booking by ID
     * Delete a booking entity by ID
     */
    async deleteBooking(requestParameters: DeleteBookingRequest): Promise<object> {
        const response = await this.deleteBookingRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bookreturn by ID
     * Delete a bookreturn entity by ID
     */
    async deleteBookreturnRaw(requestParameters: DeleteBookreturnRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBookreturn.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookreturns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get bookreturn by ID
     * Delete a bookreturn entity by ID
     */
    async deleteBookreturn(requestParameters: DeleteBookreturnRequest): Promise<object> {
        const response = await this.deleteBookreturnRaw(requestParameters);
        return await response.value();
    }

    /**
     * get category by ID
     * Delete a category entity by ID
     */
    async deleteCategoryRaw(requestParameters: DeleteCategoryRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categorys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get category by ID
     * Delete a category entity by ID
     */
    async deleteCategory(requestParameters: DeleteCategoryRequest): Promise<object> {
        const response = await this.deleteCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * get cliententity by ID
     * Delete a cliententity entity by ID
     */
    async deleteCliententityRaw(requestParameters: DeleteCliententityRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCliententity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cliententitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get cliententity by ID
     * Delete a cliententity entity by ID
     */
    async deleteCliententity(requestParameters: DeleteCliententityRequest): Promise<object> {
        const response = await this.deleteCliententityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get location by ID
     * Delete a location entity by ID
     */
    async deleteLocationRaw(requestParameters: DeleteLocationRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLocation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get location by ID
     * Delete a location entity by ID
     */
    async deleteLocation(requestParameters: DeleteLocationRequest): Promise<object> {
        const response = await this.deleteLocationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get research by ID
     * Delete a research entity by ID
     */
    async deleteResearchRaw(requestParameters: DeleteResearchRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteResearch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researches/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get research by ID
     * Delete a research entity by ID
     */
    async deleteResearch(requestParameters: DeleteResearchRequest): Promise<object> {
        const response = await this.deleteResearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * get researchtype by ID
     * Delete a researchtype entity by ID
     */
    async deleteResearchtypeRaw(requestParameters: DeleteResearchtypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteResearchtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ResearchTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get researchtype by ID
     * Delete a researchtype entity by ID
     */
    async deleteResearchtype(requestParameters: DeleteResearchtypeRequest): Promise<object> {
        const response = await this.deleteResearchtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get role by ID
     * Delete a role entity by ID
     */
    async deleteRoleRaw(requestParameters: DeleteRoleRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get role by ID
     * Delete a role entity by ID
     */
    async deleteRole(requestParameters: DeleteRoleRequest): Promise<object> {
        const response = await this.deleteRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roominfo by ID
     * Delete a roominfo entity by ID
     */
    async deleteRoominfoRaw(requestParameters: DeleteRoominfoRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoominfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roominfos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get roominfo by ID
     * Delete a roominfo entity by ID
     */
    async deleteRoominfo(requestParameters: DeleteRoominfoRequest): Promise<object> {
        const response = await this.deleteRoominfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * get servicepoint by ID
     * Delete a servicepoint entity by ID
     */
    async deleteServicepointRaw(requestParameters: DeleteServicepointRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteServicepoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/servicepoints/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get servicepoint by ID
     * Delete a servicepoint entity by ID
     */
    async deleteServicepoint(requestParameters: DeleteServicepointRequest): Promise<object> {
        const response = await this.deleteServicepointRaw(requestParameters);
        return await response.value();
    }

    /**
     * get status by ID
     * Delete a status entity by ID
     */
    async deleteStatusRaw(requestParameters: DeleteStatusRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get status by ID
     * Delete a status entity by ID
     */
    async deleteStatus(requestParameters: DeleteStatusRequest): Promise<object> {
        const response = await this.deleteStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get author by ID
     * Get a author entity by ID
     */
    async getAuthorRaw(requestParameters: GetAuthorRequest): Promise<runtime.ApiResponse<EntAuthor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAuthor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Authors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAuthorFromJSON(jsonValue));
    }

    /**
     * get author by ID
     * Get a author entity by ID
     */
    async getAuthor(requestParameters: GetAuthorRequest): Promise<EntAuthor> {
        const response = await this.getAuthorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get book by ID
     * Get a book entity bygo mod  ID
     */
    async getBookRaw(requestParameters: GetBookRequest): Promise<runtime.ApiResponse<EntBook>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBook.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookFromJSON(jsonValue));
    }

    /**
     * get book by ID
     * Get a book entity bygo mod  ID
     */
    async getBook(requestParameters: GetBookRequest): Promise<EntBook> {
        const response = await this.getBookRaw(requestParameters);
        return await response.value();
    }

    /**
     * get book by Search
     * Get a book entity by Search
     */
    async getBookBySearchRaw(requestParameters: GetBookBySearchRequest): Promise<runtime.ApiResponse<EntBook>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.book !== undefined) {
            queryParameters['book'] = requestParameters.book;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchbooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookFromJSON(jsonValue));
    }

    /**
     * get book by Search
     * Get a book entity by Search
     */
    async getBookBySearch(requestParameters: GetBookBySearchRequest): Promise<EntBook> {
        const response = await this.getBookBySearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bookborrow by ID
     * Get a bookborrow entity by ID
     */
    async getBookborrowRaw(requestParameters: GetBookborrowRequest): Promise<runtime.ApiResponse<Array<EntBookborrow>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBookborrow.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookborrows/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBookborrowFromJSON));
    }

    /**
     * get bookborrow by ID
     * Get a bookborrow entity by ID
     */
    async getBookborrow(requestParameters: GetBookborrowRequest): Promise<Array<EntBookborrow>> {
        const response = await this.getBookborrowRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bookborrowuser by ID
     * Get a bookborrowuser entity by ID
     */
    async getBookborrowuserRaw(requestParameters: GetBookborrowuserRequest): Promise<runtime.ApiResponse<Array<EntBookborrow>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBookborrowuser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookborrowusers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBookborrowFromJSON));
    }

    /**
     * get bookborrowuser by ID
     * Get a bookborrowuser entity by ID
     */
    async getBookborrowuser(requestParameters: GetBookborrowuserRequest): Promise<Array<EntBookborrow>> {
        const response = await this.getBookborrowuserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get booking by ID
     * Get a booking entity by ID
     */
    async getBookingRaw(requestParameters: GetBookingRequest): Promise<runtime.ApiResponse<EntBooking>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBooking.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookingFromJSON(jsonValue));
    }

    /**
     * get booking by ID
     * Get a booking entity by ID
     */
    async getBooking(requestParameters: GetBookingRequest): Promise<EntBooking> {
        const response = await this.getBookingRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bookreturn by ID
     * Get a bookreturn entity by ID
     */
    async getBookreturnRaw(requestParameters: GetBookreturnRequest): Promise<runtime.ApiResponse<Array<EntBookreturn>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBookreturn.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookreturns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBookreturnFromJSON));
    }

    /**
     * get bookreturn by ID
     * Get a bookreturn entity by ID
     */
    async getBookreturn(requestParameters: GetBookreturnRequest): Promise<Array<EntBookreturn>> {
        const response = await this.getBookreturnRaw(requestParameters);
        return await response.value();
    }

    /**
     * get category by ID
     * Get a category entity by ID
     */
    async getCategoryRaw(requestParameters: GetCategoryRequest): Promise<runtime.ApiResponse<EntCategory>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categorys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCategoryFromJSON(jsonValue));
    }

    /**
     * get category by ID
     * Get a category entity by ID
     */
    async getCategory(requestParameters: GetCategoryRequest): Promise<EntCategory> {
        const response = await this.getCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * get cliententity by ID
     * Get a cliententity entity by ID
     */
    async getCliententityRaw(requestParameters: GetCliententityRequest): Promise<runtime.ApiResponse<EntClientEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCliententity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cliententitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClientEntityFromJSON(jsonValue));
    }

    /**
     * get cliententity by ID
     * Get a cliententity entity by ID
     */
    async getCliententity(requestParameters: GetCliententityRequest): Promise<EntClientEntity> {
        const response = await this.getCliententityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get location by ID
     * Get a locationr entity by ID
     */
    async getLocationRaw(requestParameters: GetLocationRequest): Promise<runtime.ApiResponse<EntLocation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLocation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLocationFromJSON(jsonValue));
    }

    /**
     * get location by ID
     * Get a locationr entity by ID
     */
    async getLocation(requestParameters: GetLocationRequest): Promise<EntLocation> {
        const response = await this.getLocationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get preemption by ID
     * Get a preemption entity by ID
     */
    async getPreemptionRaw(requestParameters: GetPreemptionRequest): Promise<runtime.ApiResponse<EntPreemption>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPreemption.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/preemptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPreemptionFromJSON(jsonValue));
    }

    /**
     * get preemption by ID
     * Get a preemption entity by ID
     */
    async getPreemption(requestParameters: GetPreemptionRequest): Promise<EntPreemption> {
        const response = await this.getPreemptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get purpose by ID
     * Get a purpose entity by ID
     */
    async getPurposeRaw(requestParameters: GetPurposeRequest): Promise<runtime.ApiResponse<EntPurpose>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPurpose.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/purposes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPurposeFromJSON(jsonValue));
    }

    /**
     * get purpose by ID
     * Get a purpose entity by ID
     */
    async getPurpose(requestParameters: GetPurposeRequest): Promise<EntPurpose> {
        const response = await this.getPurposeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get research by ID
     * Get a research entity by ID
     */
    async getRearchRaw(requestParameters: GetRearchRequest): Promise<runtime.ApiResponse<EntResearch>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRearch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researches/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntResearchFromJSON(jsonValue));
    }

    /**
     * get research by ID
     * Get a research entity by ID
     */
    async getRearch(requestParameters: GetRearchRequest): Promise<EntResearch> {
        const response = await this.getRearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * get research by Search
     * Get a research entity by Search
     */
    async getResearchBySearchRaw(requestParameters: GetResearchBySearchRequest): Promise<runtime.ApiResponse<EntResearch>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.research !== undefined) {
            queryParameters['research'] = requestParameters.research;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchresearchs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntResearchFromJSON(jsonValue));
    }

    /**
     * get research by Search
     * Get a research entity by Search
     */
    async getResearchBySearch(requestParameters: GetResearchBySearchRequest): Promise<EntResearch> {
        const response = await this.getResearchBySearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * get researchtype by ID
     * Get a researchtype entity by ID
     */
    async getResearchtypeRaw(requestParameters: GetResearchtypeRequest): Promise<runtime.ApiResponse<EntResearchtype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getResearchtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ResearchTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntResearchtypeFromJSON(jsonValue));
    }

    /**
     * get researchtype by ID
     * Get a researchtype entity by ID
     */
    async getResearchtype(requestParameters: GetResearchtypeRequest): Promise<EntResearchtype> {
        const response = await this.getResearchtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get role by ID
     * Get a role entity by ID
     */
    async getRoleRaw(requestParameters: GetRoleRequest): Promise<runtime.ApiResponse<EntRole>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoleFromJSON(jsonValue));
    }

    /**
     * get role by ID
     * Get a role entity by ID
     */
    async getRole(requestParameters: GetRoleRequest): Promise<EntRole> {
        const response = await this.getRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roominfo by ID
     * Get a roominfo entity by ID
     */
    async getRoominfoRaw(requestParameters: GetRoominfoRequest): Promise<runtime.ApiResponse<EntRoominfo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoominfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roominfos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoominfoFromJSON(jsonValue));
    }

    /**
     * get roominfo by ID
     * Get a roominfo entity by ID
     */
    async getRoominfo(requestParameters: GetRoominfoRequest): Promise<EntRoominfo> {
        const response = await this.getRoominfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * get servicepoint by ID
     * Get a servicepoint entity by ID
     */
    async getServicepointRaw(requestParameters: GetServicepointRequest): Promise<runtime.ApiResponse<EntServicePoint>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getServicepoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/servicepoints/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntServicePointFromJSON(jsonValue));
    }

    /**
     * get servicepoint by ID
     * Get a servicepoint entity by ID
     */
    async getServicepoint(requestParameters: GetServicepointRequest): Promise<EntServicePoint> {
        const response = await this.getServicepointRaw(requestParameters);
        return await response.value();
    }

    /**
     * get status by ID
     * Get a status entity by ID
     */
    async getStatusRaw(requestParameters: GetStatusRequest): Promise<runtime.ApiResponse<EntStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusFromJSON(jsonValue));
    }

    /**
     * get status by ID
     * Get a status entity by ID
     */
    async getStatus(requestParameters: GetStatusRequest): Promise<EntStatus> {
        const response = await this.getStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list author entities
     * List author entities
     */
    async listAuthorRaw(requestParameters: ListAuthorRequest): Promise<runtime.ApiResponse<Array<EntAuthor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Authors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAuthorFromJSON));
    }

    /**
     * list author entities
     * List author entities
     */
    async listAuthor(requestParameters: ListAuthorRequest): Promise<Array<EntAuthor>> {
        const response = await this.listAuthorRaw(requestParameters);
        return await response.value();
    }

    /**
     * list book entities
     * List book entities
     */
    async listBookRaw(requestParameters: ListBookRequest): Promise<runtime.ApiResponse<Array<EntBook>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBookFromJSON));
    }

    /**
     * list book entities
     * List book entities
     */
    async listBook(requestParameters: ListBookRequest): Promise<Array<EntBook>> {
        const response = await this.listBookRaw(requestParameters);
        return await response.value();
    }

    /**
     * list bookborrow entities
     * List bookborrow entities
     */
    async listBookborrowRaw(requestParameters: ListBookborrowRequest): Promise<runtime.ApiResponse<Array<EntBookborrow>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookborrows`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBookborrowFromJSON));
    }

    /**
     * list bookborrow entities
     * List bookborrow entities
     */
    async listBookborrow(requestParameters: ListBookborrowRequest): Promise<Array<EntBookborrow>> {
        const response = await this.listBookborrowRaw(requestParameters);
        return await response.value();
    }

    /**
     * list bookfrees entities
     * List bookfrees entities
     */
    async listBookfreesRaw(requestParameters: ListBookfreesRequest): Promise<runtime.ApiResponse<Array<EntBook>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookfrees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBookFromJSON));
    }

    /**
     * list bookfrees entities
     * List bookfrees entities
     */
    async listBookfrees(requestParameters: ListBookfreesRequest): Promise<Array<EntBook>> {
        const response = await this.listBookfreesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list booking entities
     * List booking entities
     */
    async listBookingRaw(): Promise<runtime.ApiResponse<Array<EntBooking>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBookingFromJSON));
    }

    /**
     * list booking entities
     * List booking entities
     */
    async listBooking(): Promise<Array<EntBooking>> {
        const response = await this.listBookingRaw();
        return await response.value();
    }

    /**
     * list bookreturn entities
     * List bookreturn entities
     */
    async listBookreturnRaw(requestParameters: ListBookreturnRequest): Promise<runtime.ApiResponse<Array<EntBookreturn>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookreturns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBookreturnFromJSON));
    }

    /**
     * list bookreturn entities
     * List bookreturn entities
     */
    async listBookreturn(requestParameters: ListBookreturnRequest): Promise<Array<EntBookreturn>> {
        const response = await this.listBookreturnRaw(requestParameters);
        return await response.value();
    }

    /**
     * list category entities
     * List category entities
     */
    async listCategoryRaw(requestParameters: ListCategoryRequest): Promise<runtime.ApiResponse<Array<EntCategory>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categorys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCategoryFromJSON));
    }

    /**
     * list category entities
     * List category entities
     */
    async listCategory(requestParameters: ListCategoryRequest): Promise<Array<EntCategory>> {
        const response = await this.listCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * list cliententity entities
     * List cliententity entities
     */
    async listCliententityRaw(): Promise<runtime.ApiResponse<Array<EntClientEntity>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cliententitys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClientEntityFromJSON));
    }

    /**
     * list cliententity entities
     * List cliententity entities
     */
    async listCliententity(): Promise<Array<EntClientEntity>> {
        const response = await this.listCliententityRaw();
        return await response.value();
    }

    /**
     * list location entities
     * List location entities
     */
    async listLocationRaw(requestParameters: ListLocationRequest): Promise<runtime.ApiResponse<Array<EntLocation>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntLocationFromJSON));
    }

    /**
     * list location entities
     * List location entities
     */
    async listLocation(requestParameters: ListLocationRequest): Promise<Array<EntLocation>> {
        const response = await this.listLocationRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Preemption entities
     * List preemption entities
     */
    async listPreemptionRaw(requestParameters: ListPreemptionRequest): Promise<runtime.ApiResponse<Array<EntPreemption>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.nameu !== undefined) {
            queryParameters['nameu'] = requestParameters.nameu;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/preemptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPreemptionFromJSON));
    }

    /**
     * list Preemption entities
     * List preemption entities
     */
    async listPreemption(requestParameters: ListPreemptionRequest): Promise<Array<EntPreemption>> {
        const response = await this.listPreemptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list purpose entities
     * List purpose entities
     */
    async listPurposeRaw(requestParameters: ListPurposeRequest): Promise<runtime.ApiResponse<Array<EntPurpose>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/purposes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPurposeFromJSON));
    }

    /**
     * list purpose entities
     * List purpose entities
     */
    async listPurpose(requestParameters: ListPurposeRequest): Promise<Array<EntPurpose>> {
        const response = await this.listPurposeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list research entities
     * List research entities
     */
    async listResearchRaw(requestParameters: ListResearchRequest): Promise<runtime.ApiResponse<Array<EntResearch>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researches`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntResearchFromJSON));
    }

    /**
     * list research entities
     * List research entities
     */
    async listResearch(requestParameters: ListResearchRequest): Promise<Array<EntResearch>> {
        const response = await this.listResearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * list researchtype entities
     * List researchtype entities
     */
    async listResearchtypeRaw(requestParameters: ListResearchtypeRequest): Promise<runtime.ApiResponse<Array<EntResearchtype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ResearchTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntResearchtypeFromJSON));
    }

    /**
     * list researchtype entities
     * List researchtype entities
     */
    async listResearchtype(requestParameters: ListResearchtypeRequest): Promise<Array<EntResearchtype>> {
        const response = await this.listResearchtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list role entities
     * List role entities
     */
    async listRoleRaw(requestParameters: ListRoleRequest): Promise<runtime.ApiResponse<Array<EntRole>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoleFromJSON));
    }

    /**
     * list role entities
     * List role entities
     */
    async listRole(requestParameters: ListRoleRequest): Promise<Array<EntRole>> {
        const response = await this.listRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roominfo entities
     * List roominfo entities
     */
    async listRoominfoRaw(requestParameters: ListRoominfoRequest): Promise<runtime.ApiResponse<Array<EntRoominfo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roominfos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoominfoFromJSON));
    }

    /**
     * list roominfo entities
     * List roominfo entities
     */
    async listRoominfo(requestParameters: ListRoominfoRequest): Promise<Array<EntRoominfo>> {
        const response = await this.listRoominfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * list servicepoint entities
     * List servicepoint entities
     */
    async listServicepointRaw(requestParameters: ListServicepointRequest): Promise<runtime.ApiResponse<Array<EntServicePoint>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/servicepoints`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntServicePointFromJSON));
    }

    /**
     * list servicepoint entities
     * List servicepoint entities
     */
    async listServicepoint(requestParameters: ListServicepointRequest): Promise<Array<EntServicePoint>> {
        const response = await this.listServicepointRaw(requestParameters);
        return await response.value();
    }

    /**
     * list status entities
     * List status entities
     */
    async listStatusRaw(requestParameters: ListStatusRequest): Promise<runtime.ApiResponse<Array<EntStatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statuss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatusFromJSON));
    }

    /**
     * list status entities
     * List status entities
     */
    async listStatus(requestParameters: ListStatusRequest): Promise<Array<EntStatus>> {
        const response = await this.listStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(): Promise<Array<EntUser>> {
        const response = await this.listUserRaw();
        return await response.value();
    }

    /**
     * search booking entities
     * search booking entities
     */
    async searchBookingRaw(requestParameters: SearchBookingRequest): Promise<runtime.ApiResponse<Array<EntBooking>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userid !== undefined) {
            queryParameters['userid'] = requestParameters.userid;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.clientname !== undefined) {
            queryParameters['clientname'] = requestParameters.clientname;
        }

        if (requestParameters.phonenumber !== undefined) {
            queryParameters['phonenumber'] = requestParameters.phonenumber;
        }

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchbookings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBookingFromJSON));
    }

    /**
     * search booking entities
     * search booking entities
     */
    async searchBooking(requestParameters: SearchBookingRequest): Promise<Array<EntBooking>> {
        const response = await this.searchBookingRaw(requestParameters);
        return await response.value();
    }

    /**
     * update author by ID
     * Update a author entity by ID
     */
    async updateAuthorRaw(requestParameters: UpdateAuthorRequest): Promise<runtime.ApiResponse<EntAuthor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAuthor.');
        }

        if (requestParameters.author === null || requestParameters.author === undefined) {
            throw new runtime.RequiredError('author','Required parameter requestParameters.author was null or undefined when calling updateAuthor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Authors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntAuthorToJSON(requestParameters.author),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAuthorFromJSON(jsonValue));
    }

    /**
     * update author by ID
     * Update a author entity by ID
     */
    async updateAuthor(requestParameters: UpdateAuthorRequest): Promise<EntAuthor> {
        const response = await this.updateAuthorRaw(requestParameters);
        return await response.value();
    }

    /**
     * update book by ID
     * Update a book entity by ID
     */
    async updateBookRaw(requestParameters: UpdateBookRequest): Promise<runtime.ApiResponse<EntBook>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBook.');
        }

        if (requestParameters.book === null || requestParameters.book === undefined) {
            throw new runtime.RequiredError('book','Required parameter requestParameters.book was null or undefined when calling updateBook.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/books/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntBookToJSON(requestParameters.book),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookFromJSON(jsonValue));
    }

    /**
     * update book by ID
     * Update a book entity by ID
     */
    async updateBook(requestParameters: UpdateBookRequest): Promise<EntBook> {
        const response = await this.updateBookRaw(requestParameters);
        return await response.value();
    }

    /**
     * update bookborrow by ID
     * Update a bookborrow entity by ID
     */
    async updateBookborrowRaw(requestParameters: UpdateBookborrowRequest): Promise<runtime.ApiResponse<EntBookborrow>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBookborrow.');
        }

        if (requestParameters.bookborrow === null || requestParameters.bookborrow === undefined) {
            throw new runtime.RequiredError('bookborrow','Required parameter requestParameters.bookborrow was null or undefined when calling updateBookborrow.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bookborrows/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntBookborrowToJSON(requestParameters.bookborrow),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookborrowFromJSON(jsonValue));
    }

    /**
     * update bookborrow by ID
     * Update a bookborrow entity by ID
     */
    async updateBookborrow(requestParameters: UpdateBookborrowRequest): Promise<EntBookborrow> {
        const response = await this.updateBookborrowRaw(requestParameters);
        return await response.value();
    }

    /**
     * update booking by ID
     * Update a booking entity by ID
     */
    async updateBookingRaw(requestParameters: UpdateBookingRequest): Promise<runtime.ApiResponse<EntBooking>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBooking.');
        }

        if (requestParameters.booking === null || requestParameters.booking === undefined) {
            throw new runtime.RequiredError('booking','Required parameter requestParameters.booking was null or undefined when calling updateBooking.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bookings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntBookingToJSON(requestParameters.booking),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookingFromJSON(jsonValue));
    }

    /**
     * update booking by ID
     * Update a booking entity by ID
     */
    async updateBooking(requestParameters: UpdateBookingRequest): Promise<EntBooking> {
        const response = await this.updateBookingRaw(requestParameters);
        return await response.value();
    }

    /**
     * update category by ID
     * Update a category entity by ID
     */
    async updateCategoryRaw(requestParameters: UpdateCategoryRequest): Promise<runtime.ApiResponse<EntCategory>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCategory.');
        }

        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling updateCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/categorys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCategoryToJSON(requestParameters.category),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCategoryFromJSON(jsonValue));
    }

    /**
     * update category by ID
     * Update a category entity by ID
     */
    async updateCategory(requestParameters: UpdateCategoryRequest): Promise<EntCategory> {
        const response = await this.updateCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * update cliententity by ID
     * Update a cliententity entity by ID
     */
    async updateCliententityRaw(requestParameters: UpdateCliententityRequest): Promise<runtime.ApiResponse<EntClientEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCliententity.');
        }

        if (requestParameters.cliententity === null || requestParameters.cliententity === undefined) {
            throw new runtime.RequiredError('cliententity','Required parameter requestParameters.cliententity was null or undefined when calling updateCliententity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cliententitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersClientEntityToJSON(requestParameters.cliententity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClientEntityFromJSON(jsonValue));
    }

    /**
     * update cliententity by ID
     * Update a cliententity entity by ID
     */
    async updateCliententity(requestParameters: UpdateCliententityRequest): Promise<EntClientEntity> {
        const response = await this.updateCliententityRaw(requestParameters);
        return await response.value();
    }

    /**
     * update location by ID
     * Update a location entity by ID
     */
    async updateLocationRaw(requestParameters: UpdateLocationRequest): Promise<runtime.ApiResponse<EntLocation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLocation.');
        }

        if (requestParameters.location === null || requestParameters.location === undefined) {
            throw new runtime.RequiredError('location','Required parameter requestParameters.location was null or undefined when calling updateLocation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntLocationToJSON(requestParameters.location),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLocationFromJSON(jsonValue));
    }

    /**
     * update location by ID
     * Update a location entity by ID
     */
    async updateLocation(requestParameters: UpdateLocationRequest): Promise<EntLocation> {
        const response = await this.updateLocationRaw(requestParameters);
        return await response.value();
    }

    /**
     * update research by ID
     * Update a research entity by ID
     */
    async updateResearchRaw(requestParameters: UpdateResearchRequest): Promise<runtime.ApiResponse<EntResearch>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateResearch.');
        }

        if (requestParameters.research === null || requestParameters.research === undefined) {
            throw new runtime.RequiredError('research','Required parameter requestParameters.research was null or undefined when calling updateResearch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/researches/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntResearchToJSON(requestParameters.research),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntResearchFromJSON(jsonValue));
    }

    /**
     * update research by ID
     * Update a research entity by ID
     */
    async updateResearch(requestParameters: UpdateResearchRequest): Promise<EntResearch> {
        const response = await this.updateResearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * update researchtype by ID
     * Update a researchtype entity by ID
     */
    async updateResearchtypeRaw(requestParameters: UpdateResearchtypeRequest): Promise<runtime.ApiResponse<EntResearchtype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateResearchtype.');
        }

        if (requestParameters.researchtype === null || requestParameters.researchtype === undefined) {
            throw new runtime.RequiredError('researchtype','Required parameter requestParameters.researchtype was null or undefined when calling updateResearchtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ResearchTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntResearchtypeToJSON(requestParameters.researchtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntResearchtypeFromJSON(jsonValue));
    }

    /**
     * update researchtype by ID
     * Update a researchtype entity by ID
     */
    async updateResearchtype(requestParameters: UpdateResearchtypeRequest): Promise<EntResearchtype> {
        const response = await this.updateResearchtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update role by ID
     * Update a role entity by ID
     */
    async updateRoleRaw(requestParameters: UpdateRoleRequest): Promise<runtime.ApiResponse<EntRole>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRole.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling updateRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoleToJSON(requestParameters.role),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoleFromJSON(jsonValue));
    }

    /**
     * update role by ID
     * Update a role entity by ID
     */
    async updateRole(requestParameters: UpdateRoleRequest): Promise<EntRole> {
        const response = await this.updateRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * update roominfo by ID
     * Update a roominfo entity by ID
     */
    async updateRoominfoRaw(requestParameters: UpdateRoominfoRequest): Promise<runtime.ApiResponse<EntRoominfo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoominfo.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateRoominfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roominfos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoominfoToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoominfoFromJSON(jsonValue));
    }

    /**
     * update roominfo by ID
     * Update a roominfo entity by ID
     */
    async updateRoominfo(requestParameters: UpdateRoominfoRequest): Promise<EntRoominfo> {
        const response = await this.updateRoominfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * update servicepoint by ID
     * Update a servicepoint entity by ID
     */
    async updateServicepointRaw(requestParameters: UpdateServicepointRequest): Promise<runtime.ApiResponse<EntServicePoint>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateServicepoint.');
        }

        if (requestParameters.servicepoint === null || requestParameters.servicepoint === undefined) {
            throw new runtime.RequiredError('servicepoint','Required parameter requestParameters.servicepoint was null or undefined when calling updateServicepoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/servicepoints/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntServicePointToJSON(requestParameters.servicepoint),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntServicePointFromJSON(jsonValue));
    }

    /**
     * update servicepoint by ID
     * Update a servicepoint entity by ID
     */
    async updateServicepoint(requestParameters: UpdateServicepointRequest): Promise<EntServicePoint> {
        const response = await this.updateServicepointRaw(requestParameters);
        return await response.value();
    }

    /**
     * update status by ID
     * Update a status entity by ID
     */
    async updateStatusRaw(requestParameters: UpdateStatusRequest): Promise<runtime.ApiResponse<EntStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStatus.');
        }

        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling updateStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatusToJSON(requestParameters.status),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusFromJSON(jsonValue));
    }

    /**
     * update status by ID
     * Update a status entity by ID
     */
    async updateStatus(requestParameters: UpdateStatusRequest): Promise<EntStatus> {
        const response = await this.updateStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
